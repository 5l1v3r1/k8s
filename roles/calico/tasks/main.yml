- name: "加密etcd-ca证书"
  shell: base64 -w 0 /etc/kubernetes/ssl/ca.pem
  register: etcd-ca
- name: "加密etcd-cert证书"
  shell: base64 -w 0 /etc/kubernetes/ssl/etcd_{{ ansible_default_ipv4.address }}.pem
  register: etcd-cert
- name: "加密etcd-key证书"
  shell: base64 -w 0 /etc/kubernetes/ssl/etcd_{{ ansible_default_ipv4.address }}.key
  register: etcd-key
- name: "创建ServiceAccount"
  k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: calico-controllers
        namespace: kube-system
- name: "创建Secret"
  k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: calico-etcd-secrets
        namespace: kube-system
      data:
        etcd-key: "{{ etcd-key }}"
        etcd-cert: "{{ etcd-cert }}"
        etcd-ca: "{{ etcd-ca }}"
- name: "创建ConfigMap"
  k8s:
    state: present
    definition: 
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: calico-config
        namespace: kube-system
      data:
        etcd_endpoints: "{% set pk = groups['etcd'] %}{% for host in pk %}https://{{ host }}:2379{% if not loop.last %},{% endif %}{% endfor %}"
        etcd_ca: "/calico-secrets/etcd-ca"
        etcd_cert: "/calico-secrets/etcd-cert"
        etcd_key: "/calico-secrets/etcd-key"
        typha_service_name: "calico-typha"
        calico_backend: "bird"
        veth_mtu: "1440"
        cni_network_config: |-
          {
            "name": "k8s-pod-network",
            "cniVersion": "0.3.0",
            "plugins": [
              {
                "type": "calico",
                "log_level": "info",
                "etcd_endpoints": "__ETCD_ENDPOINTS__",
                "etcd_key_file": "__ETCD_KEY_FILE__",
                "etcd_cert_file": "__ETCD_CERT_FILE__",
                "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
                "mtu": __CNI_MTU__,
                "ipam": {
                  "type": "calico-ipam"
                },
                "policy": {
                    "type": "k8s"
                },
                "kubernetes": {
                    "kubeconfig": "__KUBECONFIG_FILEPATH__"
                }
              },
              {
                "type": "portmap",
                "snat": true,
                "capabilities": {"portMappings": true}
              }
            ]
          }

- name: "创建ClusterRole"
  k8s:
    state: present
    definition: 
      kind: ClusterRole
      apiVersion: rbac.authorization.k8s.io/v1beta1
      metadata:
        name: calico-controllers
      rules:
        - apiGroups: [""]
          resources:
            - pods
            - nodes
            - namespaces
            - serviceaccounts
          verbs:
            - watch
            - list
        - apiGroups: ["networking.k8s.io"]
          resources:
            - networkpolicies
          verbs:
            - watch
            - list
- name: "创建ClusterRoleBinding"
  k8s:
    state: present
    definition: 
      kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1beta1
      metadata:
        name: calico-controllers
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: calico-controllers
      subjects:
      - kind: ServiceAccount
        name: calico-controllers
        namespace: kube-system
- name: "创建Calico Node ClusterRole"
  k8s:
    state: present
    definition: 
      kind: ClusterRole
      apiVersion: rbac.authorization.k8s.io/v1beta1
      metadata:
        name: calico-node
      rules:
        - apiGroups: [""]
          resources:
            - pods
            - nodes
            - namespaces
          verbs:
            - get
        - apiGroups: [""]
          resources:
            - endpoints
            - services
          verbs:
            - watch
            - list
        - apiGroups: [""]
          resources:
            - nodes/status
          verbs:
            - patch

- name: "创建Calico Node ClusterRoleBinding"
  k8s:
    state: present
    definition: 
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: calico-node
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: calico-node
      subjects:
      - kind: ServiceAccount
        name: calico-node
        namespace: kube-system
- name: "创建Calico DaemonSet"
  k8s:
    state: present
    definition: 
      kind: DaemonSet
      apiVersion: extensions/v1beta1
      metadata:
        name: calico-node
        namespace: kube-system
        labels:
          k8s-app: calico-node
      spec:
        selector:
          matchLabels:
            k8s-app: calico-node
        updateStrategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 1
        template:
          metadata:
            labels:
              k8s-app: calico-node
            annotations:
              scheduler.alpha.kubernetes.io/critical-pod: ''
          spec:
            nodeSelector:
              beta.kubernetes.io/os: linux
            hostNetwork: true
            tolerations:
              - effect: NoSchedule
                operator: Exists
              - key: CriticalAddonsOnly
                operator: Exists
              - effect: NoExecute
                operator: Exists
            serviceAccountName: calico-node
            terminationGracePeriodSeconds: 0
            initContainers:
              - name: install-cni
                image: nat-harbor.daocloud.io/k8s/cni:v3.6.2
                command: ["/install-cni.sh"]
                env:
                  - name: CNI_CONF_NAME
                    value: "10-calico.conflist"
                  - name: CNI_NETWORK_CONFIG
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: cni_network_config
                  - name: ETCD_ENDPOINTS
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_endpoints
                  - name: CNI_MTU
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: veth_mtu
                  - name: SLEEP
                    value: "false"
                volumeMounts:
                  - mountPath: /host/opt/cni/bin
                    name: cni-bin-dir
                  - mountPath: /host/etc/cni/net.d
                    name: cni-net-dir
                  - mountPath: /calico-secrets
                    name: etcd-certs
            containers:
              - name: calico-node
                image: nat-harbor.daocloud.io/k8s/node:v3.6.2
                env:
                  - name: ETCD_ENDPOINTS
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_endpoints
                  - name: ETCD_CA_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_ca
                  - name: ETCD_KEY_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_key
                  - name: ETCD_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_cert
                  - name: CALICO_K8S_NODE_REF
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
                  - name: CALICO_NETWORKING_BACKEND
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: calico_backend
                  - name: CLUSTER_TYPE
                    value: "k8s,bgp"
                  - name: IP
                    value: "autodetect"
                  - name: CALICO_IPV4POOL_IPIP
                    value: "off"
                  - name: FELIX_IPINIPMTU
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: veth_mtu
                  - name: CALICO_IPV4POOL_CIDR
                    value: "{{ pod_cluster_cidr }}"
                  - name: CALICO_DISABLE_FILE_LOGGING
                    value: "true"
                  - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
                    value: "ACCEPT"
                  - name: FELIX_IPV6SUPPORT
                    value: "false"
                  - name: FELIX_LOGSEVERITYSCREEN
                    value: "info"
                  - name: FELIX_HEALTHENABLED
                    value: "true"
                  - name: IP_AUTODETECTION_METHOD
                    value: "can-reach={{ apiserver_domain_name }}"
                securityContext:
                  privileged: true
                resources:
                  requests:
                    cpu: 250m
                livenessProbe:
                  httpGet:
                    path: /liveness
                    port: 9099
                    host: localhost
                  periodSeconds: 10
                  initialDelaySeconds: 10
                  failureThreshold: 6
                readinessProbe:
                  exec:
                    command:
                    - /bin/calico-node
                    - -bird-ready
                    - -felix-ready
                  periodSeconds: 10
                volumeMounts:
                  - mountPath: /lib/modules
                    name: lib-modules
                    readOnly: true
                  - mountPath: /run/xtables.lock
                    name: xtables-lock
                    readOnly: false
                  - mountPath: /var/run/calico
                    name: var-run-calico
                    readOnly: false
                  - mountPath: /var/lib/calico
                    name: var-lib-calico
                    readOnly: false
                  - mountPath: /calico-secrets
                    name: etcd-certs
            volumes:
              - name: lib-modules
                hostPath:
                  path: /lib/modules
              - name: var-run-calico
                hostPath:
                  path: /var/run/calico
              - name: var-lib-calico
                hostPath:
                  path: /var/lib/calico
              - name: xtables-lock
                hostPath:
                  path: /run/xtables.lock
                  type: FileOrCreate
              - name: cni-bin-dir
                hostPath:
                  path: /opt/cni/bin
              - name: cni-net-dir
                hostPath:
                  path: /etc/cni/net.d
              - name: etcd-certs
                secret:
                  secretName: calico-etcd-secrets
                  defaultMode: 0400
- name: "创建Calico Node ServiceAccount"
  k8s:
    state: present
    definition: 
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: calico-node
        namespace: kube-system
- name: "创建Calico Controller"
  k8s:
    state: present
    definition: 
      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: calico-controllers
        namespace: kube-system
        labels:
          k8s-app: calico-controllers
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ''
      spec:
        replicas: 1
        strategy:
          type: Recreate
        template:
          metadata:
            name: calico-controllers
            namespace: kube-system
            labels:
              k8s-app: calico-controllers
          spec:
            nodeSelector:
              beta.kubernetes.io/os: linux
            hostNetwork: true
            tolerations:
              - key: CriticalAddonsOnly
                operator: Exists
              - key: node-role.kubernetes.io/master
                effect: NoSchedule
            serviceAccountName: calico-controllers
            containers:
              - name: calico-controllers
                image: nat-harbor.daocloud.io/k8s/kube-controllers:v3.6.2
                env:
                  - name: ETCD_ENDPOINTS
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_endpoints
                  - name: ETCD_CA_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_ca
                  - name: ETCD_KEY_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_key
                  - name: ETCD_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_cert
                  - name: ENABLED_CONTROLLERS
                    value: policy,namespace,serviceaccount,workloadendpoint,node
                volumeMounts:
                  - mountPath: /calico-secrets
                    name: etcd-certs
                readinessProbe:
                  exec:
                    command:
                    - /usr/bin/check-status
                    - -r
            volumes:
              - name: etcd-certs
                secret:
                  secretName: calico-etcd-secrets
                  defaultMode: 0400

